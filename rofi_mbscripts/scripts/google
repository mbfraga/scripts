#!/bin/bash

# user variables


# application variables
## a nice way to add bindings
#BIND1="alt+o"
#BIND2="alt+p"

# launcher variables
MSG="Search on google."
PROMPT="google:"
ANSWER=""
SEL=""
FILTER=""
INDEX=0
if [[ -z "$LAUNCHER" ]];then
   LAUNCHER="rofi"
fi


# run correct launcher with prompt and help message
function _launcher () {
   rofi -dmenu -p "$PROMPT" -mesg "$MSG" \
      -format 'i;f;s' -selected-row $INDEX -filter "$FILTER"
      #-kb-custom-1 "$BIND1" -kb-custom-2 "$BIND2" \
}

# function that creates a list for the launcher
function print_listofopts () {
   echo -e "" 
}

function main_function () {
   ANSWER=$(print_listofopts | _launcher)
   EXIT=$?
   #INDEX=${ANSWER%;*;*}
   #SEL=${ANSWER#*;*;}
   IFS=";" read -r INDEX FILTER SEL <<< "$ANSWER"
}

google() {

   if [[ $# -lt 1 ]]; then
      return 1
   fi

   wlist=( $@ )
   search=""
   for word in  ${wlist[@]}; do
      search="$search%20$word"
   done
   url="https://www.google.com/search?q=$search"
   echo "Opening url in browser: $url"
   xdg-open "$url" &
   return 0
}

# Run the script
# Loop so that you can have submenus or toggle options
while true; do
   main_function
   echo "ANSWER: $ANSWER"
   echo "INDEX: $INDEX"
   echo "FILTER: $FILTER"
   echo "SEL: $SEL"
   echo "EXIT: $EXIT"
   if [[ $EXIT -eq 0 ]]; then
      # This is the case where enter is pressed.
      google "$FILTER" || break
      break
   elif [[ $EXIT -eq 1 ]]; then
      # This is the case where rofi es escaped (should EXIT)
      break
   else
      break
   fi
done
